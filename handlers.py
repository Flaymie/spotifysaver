import os
import asyncio
import time
import logging
import re
from concurrent.futures import ThreadPoolExecutor
from aiogram import Router, F, Bot
from aiogram.types import (
    Message, CallbackQuery, FSInputFile, 
    InlineQuery, InlineQueryResultArticle, InputTextMessageContent,
    InlineQueryResultAudio, InputMessageContent, InputFile
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from keyboards import get_search_results_keyboard, get_video_id_by_key, get_track_keyboard
from utils import search_youtube, download_audio, is_youtube_url, is_spotify_url, get_spotify_track_info, is_valid_youtube_id, get_lyrics_for_track
from config import RESULTS_PER_PAGE, DOWNLOAD_LIMIT_PER_DAY, MAX_QUEUE_SIZE
from database import can_user_download, increment_user_downloads, get_user_downloads

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

class SearchStates(StatesGroup):
    searching = State()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_search_results = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
search_cache = {}
# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (30 –º–∏–Ω—É—Ç)
CACHE_TTL = 1800

# –î–æ–±–∞–≤–ª—è–µ–º ThreadPoolExecutor –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö –∑–∞–¥–∞—á
thread_pool = ThreadPoolExecutor(max_workers=4)

async def clear_user_cache(user_id, delay=CACHE_TTL):
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(delay)
    if user_id in user_search_results:
        del user_search_results[user_id]
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keys_to_delete = []
    for key in search_cache.keys():
        if key.startswith(f"{user_id}_"):
            keys_to_delete.append(key)
    
    for key in keys_to_delete:
        if key in search_cache:
            del search_cache[key]

@router.message(Command("start"))
async def cmd_start(message: Message, download_queue: asyncio.Queue, bot_instance: Bot):
    if message.chat.type != "private": return
    command_args = message.text.split()
    if len(command_args) > 1 and command_args[1].startswith("download_"):
        video_id = command_args[1].replace("download_", "")
        user_id = message.from_user.id
        if is_valid_youtube_id(video_id):
            if not await can_user_download(user_id, DOWNLOAD_LIMIT_PER_DAY):
                limit_msg = f"‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ({await get_user_downloads(user_id)}/{DOWNLOAD_LIMIT_PER_DAY})."
                await message.answer(limit_msg, parse_mode="HTML")
                return
            try:
                # –ü–µ—Ä–µ–¥–∞–µ–º message, –∞ –Ω–µ callback.message, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
                await download_queue.put((message, video_id, user_id))
                await message.answer(f"‚ñ∂Ô∏è <b>–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å</b>\n–ü–æ–∑–∏—Ü–∏—è: {download_queue.qsize()}\n–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É...", parse_mode="HTML")
            except asyncio.QueueFull:
                await message.answer(f"üòï <b>–û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞</b>\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ ({MAX_QUEUE_SIZE}).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
            return
    
    bot_info = await bot_instance.get_me()
    bot_username = bot_info.username
    await message.answer(
        "<b>üéµ SpotifySaver Bot</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –∏–∑ YouTube –∏ Spotify.\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ <b>—Å—Å—ã–ª–∫—É</b> YouTube/Spotify\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º: <code>@" + bot_username + " –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞</code>\n\n"
        "<b>–Ø –Ω–∞–π–¥—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ —Ç—Ä–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3!</b>",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
    bot_link = f"https://t.me/{bot_username}?startgroup=start"
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É",
        url=bot_link
    ))
    
    await message.answer(
        "<b>üí¨ –†–∞–±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö</b>\n\n"
        "–ë–æ—Ç —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/search</code> –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(Command("start"), F.chat.type != "private")
async def cmd_start_group(message: Message, bot_instance: Bot):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}")
    
    bot_info = await bot_instance.get_me()
    bot_username = bot_info.username
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –≥—Ä—É–ø–ø—É
    await message.reply(
        f"<b>üéµ SpotifySaver Bot</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.\n\n"
        f"<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/search –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç—Ä–µ–∫–∞</code>\n"
        f"‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/search Imagine Dragons - Believer</code>\n\n"
        f"‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º: <code>@{bot_username} –Ω–∞–∑–≤–∞–Ω–∏–µ_—Ç—Ä–µ–∫–∞</code>",
        parse_mode="HTML"
    )

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –¢–û–õ–¨–ö–û –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text & ~F.text.startswith('/'), F.chat.type == "private")
async def handle_text_or_link(message: Message, state: FSMContext, download_queue: asyncio.Queue):
    user_id = message.from_user.id
    query = message.text.strip()
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (—á–∞—Ç {message.chat.id}) –æ—Ç–ø—Ä–∞–≤–∏–ª: {query}")
    
    reply_func = message.reply if message.chat.type != "private" else message.answer
    
    is_direct_download_link = False
    video_id_to_download = None

    if is_youtube_url(query) or is_spotify_url(query):
        if not await can_user_download(user_id, DOWNLOAD_LIMIT_PER_DAY):
            limit_msg = f"<b>‚ö†Ô∏è –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ({await get_user_downloads(user_id)}/{DOWNLOAD_LIMIT_PER_DAY})."
            await reply_func(limit_msg, parse_mode="HTML")
            return
        
        progress_msg = await reply_func("<b>‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...</b>", parse_mode="HTML")
        try:
            if is_youtube_url(query):
                results = await asyncio.to_thread(search_youtube, query, 1)
                if results and is_valid_youtube_id(results[0]['id']):
                    video_id_to_download = results[0]['id']
                    is_direct_download_link = True
                else:
                    await progress_msg.edit_text("<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ YouTube –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.", parse_mode="HTML")
                    return
            elif is_spotify_url(query):
                spotify_track_name = await asyncio.to_thread(get_spotify_track_info, query)
                if spotify_track_name:
                    await progress_msg.edit_text(
                        f"<b>üéµ –¢—Ä–µ–∫ –∏–∑ Spotify</b>\n\n"
                        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {spotify_track_name}\n"
                        f"<b>–°—Ç–∞—Ç—É—Å:</b> <i>–ò—â—É –Ω–∞ YouTube...</i>",
                        parse_mode="HTML"
                    )
                    query = spotify_track_name
                else:
                    await progress_msg.edit_text("<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –∏–∑ Spotify.", parse_mode="HTML")
                    return
            
            if is_direct_download_link and video_id_to_download:
                 await progress_msg.delete()
                 try:
                    await download_queue.put((message, video_id_to_download, user_id))
                    await reply_func(
                        f"<b>‚ñ∂Ô∏è –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å</b>\n\n"
                        f"<b>–ü–æ–∑–∏—Ü–∏—è:</b> {download_queue.qsize()}\n"
                        f"<i>–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É...</i>",
                        parse_mode="HTML"
                    )
                 except asyncio.QueueFull:
                    await reply_func(
                        f"<b>üòï –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞</b>\n\n"
                        f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–∫–æ–≤ ({MAX_QUEUE_SIZE}).\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.",
                        parse_mode="HTML"
                    )
                 return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {query}: {e}")
            await progress_msg.edit_text("<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.", parse_mode="HTML")
            return
        
        if not is_direct_download_link:
            if 'progress_msg' not in locals() or not progress_msg:
                 progress_msg = await reply_func("<b>üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞...</b>", parse_mode="HTML")
            else: 
                 await progress_msg.edit_text(f"<b>üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞</b>\n\n<b>–ó–∞–ø—Ä–æ—Å:</b> \"{query}\"", parse_mode="HTML")
    else:
        progress_msg = await reply_func("<b>üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞...</b>", parse_mode="HTML")

    is_artist_track = bool(re.search(r'^(.+?)\s*[-‚Äì]\s*(.+)$', query))
    cache_key = f"{user_id}_{query}"
    if cache_key in search_cache and (time.time() - search_cache[cache_key]['timestamp'] < CACHE_TTL):
        results = search_cache[cache_key]['results']
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è '{query}' –≤–∑—è—Ç—ã –∏–∑ –∫—ç—à–∞.")
    else:
        logger.info(f"–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –Ω–∞ YouTube: {query}")
        results_limit = 5 if is_artist_track else 20
        results = await asyncio.to_thread(search_youtube, query, results_limit)
        if results: search_cache[cache_key] = {'results': results, 'timestamp': time.time()}
    
    if not results:
        await progress_msg.edit_text(
            "<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        return

    await progress_msg.delete()
    user_search_results[user_id] = results
    result_text = f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n<b>–ó–∞–ø—Ä–æ—Å:</b> \"{query}\""
    if is_artist_track: result_text += "\nüí° <i>–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</i>"
    await reply_func(
        f"{result_text}\n\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
        reply_markup=get_search_results_keyboard(results, page=0, user_id=user_id),
        parse_mode="HTML"
    )
    await state.set_state(SearchStates.searching)
    asyncio.create_task(clear_user_cache(user_id))

@router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery):
    user_id = callback.from_user.id
    page = int(callback.data.split("_")[1])
    
    if user_id not in user_search_results:
        await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)
        return
    
    results = user_search_results[user_id]
    
    await callback.message.edit_reply_markup(
        reply_markup=get_search_results_keyboard(results, page=page, user_id=user_id)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("download_"))
async def handle_download_callback(callback: CallbackQuery, state: FSMContext, download_queue: asyncio.Queue):
    user_id = callback.from_user.id
    index_key = callback.data.replace("download_", "", 1)
    
    video_id = get_video_id_by_key(index_key)
    
    if not video_id or not is_valid_youtube_id(video_id):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: ID –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.", show_alert=True)
        await callback.message.edit_text(
            "<b>‚ùå –û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–∏–¥–µ–æ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.",
            parse_mode="HTML"
        )
        return
    
    if not await can_user_download(user_id, DOWNLOAD_LIMIT_PER_DAY):
        limit_msg = f"‚ö†Ô∏è –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({await get_user_downloads(user_id)}/{DOWNLOAD_LIMIT_PER_DAY}) –∏—Å—á–µ—Ä–ø–∞–Ω."
        await callback.answer(limit_msg, show_alert=True)
        return
    
    try:
        await download_queue.put((callback.message, video_id, user_id))
        await callback.answer(f"‚ñ∂Ô∏è –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–∑. {download_queue.qsize()}). –û–∂–∏–¥–∞–π—Ç–µ.", show_alert=False)
        await callback.message.edit_text(
            "<b>üé∂ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å</b>\n\n"
            f"<b>–ü–æ–∑–∏—Ü–∏—è:</b> {download_queue.qsize()}\n"
            "<i>–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É...</i>",
            parse_mode="HTML"
        )
    except asyncio.QueueFull:
        await callback.answer(f"üòï –û—á–µ—Ä–µ–¥—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ({MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å.", show_alert=True)
    
    await state.clear()

@router.callback_query(F.data == "back_to_results")
async def handle_back_to_results(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in user_search_results:
        await callback.answer("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
        return
    
    results = user_search_results[user_id]
    
    text = "<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:</b>"
    reply_markup = get_search_results_keyboard(results, page=0, user_id=user_id)

    is_group = callback.message.chat.type != "private"
    if is_group:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=reply_markup, parse_mode="HTML")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if callback.message.text or callback.message.caption:
            await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=reply_markup, parse_mode="HTML")
    
    await state.set_state(SearchStates.searching)
    await callback.answer()

@router.callback_query(F.data.startswith("lyrics_"))
async def handle_lyrics_request(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_time = time.time()
    message_time = callback.message.date.timestamp() # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp() –¥–ª—è datetime –æ–±—ä–µ–∫—Ç–∞
    if current_time - message_time > 180: # 3 –º–∏–Ω—É—Ç—ã
        await callback.answer("‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)
        try:
            if callback.message.from_user.is_bot:
                 await callback.message.edit_text(f"{callback.message.text}\n\n<i>‚åõ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ–∫—Å—Ç —ç—Ç–æ–π –ø–µ—Å–Ω–∏ –∏—Å—Ç–µ–∫</i>", reply_markup=None, parse_mode="HTML")
            else:
                 pass
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
        return

    try:
        parts = callback.data.split("_", 2)
        if len(parts) < 3:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ", show_alert=True)
            return
        
        short_track_name_from_callback = parts[1]
        short_artist_name_from_callback = parts[2]
        
        full_track_name = None
        full_artist_name = None

        user_id = callback.from_user.id
        if user_id in user_search_results:
            for result in user_search_results[user_id]:
                title_from_search = result.get('title', '')
                uploader_from_search = result.get('uploader', '')

                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –¢—Ä–µ–∫" –∏–∑ title_from_search
                artist_title_match_search = re.match(r'^(.+?)\s*[-‚Äì‚Äî]\s*(.+)$', title_from_search)
                if artist_title_match_search:
                    potential_artist = artist_title_match_search.group(1).strip()
                    potential_title = artist_title_match_search.group(2).strip()
                    # –°–≤–µ—Ä—è–µ–º —Å —Ç–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ –∏–∑ callback, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫
                    if potential_title.lower().startswith(short_track_name_from_callback.lower()):
                        full_track_name = potential_title
                        full_artist_name = potential_artist
                        logger.info(f"–¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω –≤ user_search_results (—Ä–∞—Å–ø–∞—Ä—Å–µ–Ω): '{full_track_name}' - '{full_artist_name}'")
                        break
                
                # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å –∏–ª–∏ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å uploader –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è,
                # –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ title_from_search —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å callback
                if not full_track_name and title_from_search.lower().startswith(short_track_name_from_callback.lower()):
                    full_track_name = title_from_search
                    full_artist_name = uploader_from_search # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞
                    logger.info(f"–¢—Ä–µ–∫ –Ω–∞–π–¥–µ–Ω –≤ user_search_results (title/uploader): '{full_track_name}' - '{full_artist_name}'")
                    break
        
        if not full_track_name and callback.message.audio and callback.message.audio.title:
            full_track_name = callback.message.audio.title
            logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤–∑—è—Ç–æ –∏–∑ audio.title: '{full_track_name}'")
        elif not full_track_name and callback.message.caption:
            caption_text = callback.message.caption
            if caption_text.startswith("üéß "):
                full_track_name = caption_text[2:].strip()
                logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤–∑—è—Ç–æ –∏–∑ caption: '{full_track_name}'")
        
        if not full_artist_name and callback.message.audio and callback.message.audio.performer:
            # audio.performer —á–∞—Å—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç "SpotifySaverBot", –µ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
            performer_candidate = callback.message.audio.performer
            if performer_candidate and performer_candidate.lower() != "spotifysaverbot":
                 full_artist_name = performer_candidate
                 logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∑—è—Ç –∏–∑ audio.performer: '{full_artist_name}'")
            else:
                logger.info(f"audio.performer ('{performer_candidate}') –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.")

        if not full_track_name:
            full_track_name = short_track_name_from_callback
            logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (short) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: '{full_track_name}'")
        if not full_artist_name or full_artist_name.lower() == "spotifysaverbot":
            # –ï—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑ callback —ç—Ç–æ 'spotifysaverbot' –∏–ª–∏ –ø—É—Å—Ç–æ–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if short_artist_name_from_callback and short_artist_name_from_callback.lower() != "spotifysaverbot":
                full_artist_name = short_artist_name_from_callback
                logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (short) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: '{full_artist_name}'")
            else: # –ï—Å–ª–∏ –∏ –≤ callback_data –ø–ª–æ—Ö–æ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å, –æ—Å—Ç–∞–≤–ª—è–µ–º None
                full_artist_name = None 
                logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (short) –∏–∑ callback ('{short_artist_name_from_callback}') –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")


        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞, –µ—Å–ª–∏ –æ–Ω –≤—Å–µ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
        if not full_artist_name or full_artist_name.lower() == "spotifysaverbot":
            logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å '{full_artist_name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç—Ä–µ–∫–∞ '{full_track_name}'")
            artist_from_title_match = re.match(r'^(.+?)\s*[-‚Äì‚Äî]\s*(.+)$', full_track_name)
            if artist_from_title_match:
                potential_artist = artist_from_title_match.group(1).strip()
                potential_title = artist_from_title_match.group(2).strip()
                if len(potential_artist) > 1 and len(potential_artist.split()) < 5: # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ
                    full_artist_name = potential_artist
                    full_track_name = potential_title 
                    logger.info(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è: '{full_artist_name}', —Ç—Ä–µ–∫: '{full_track_name}'")
            else:
                 logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ '{full_track_name}'")


        if not full_artist_name: # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Ç–∞–∫ –∏ –Ω–µ –Ω–∞—à–ª–∏
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è —Ç—Ä–µ–∫–∞ '{full_track_name}'. –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º.")
            # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ "Unknown" –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å None, 
            # —á—Ç–æ–±—ã get_lyrics_for_track –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª –Ω–∞–π—Ç–∏ –±–µ–∑ –Ω–µ–≥–æ (–µ—Å–ª–∏ Genius —Ç–∞–∫ —É–º–µ–µ—Ç)
            # –î–ª—è –±–æ–ª—å—à–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç–∏, –ª—É—á—à–µ –ø–µ—Ä–µ–¥–∞—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ callback data
            full_artist_name = short_artist_name_from_callback if short_artist_name_from_callback.lower() != "spotifysaverbot" else "Unknown"

        await callback.answer("üîç –ò—â–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏...", show_alert=False)
        
        loading_msg = await callback.message.answer(
            "<b>‚è≥ –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏</b>\n\n"
            "–ò—â–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ Genius...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            parse_mode="HTML"
        )
        
        lyrics_data = await asyncio.to_thread(get_lyrics_for_track, full_artist_name, full_track_name)
        
        await loading_msg.delete()
        
        if lyrics_data["success"]:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            lyrics_text = lyrics_data["lyrics"]
            
            artist_display_name = lyrics_data['artist_name']
            featured_artists = lyrics_data.get('featured_artists', [])
            if featured_artists:
                artist_display_name += f" (feat. {', '.join(featured_artists)})"

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = (
                f"<b>üìù –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏</b>\n\n"
                f"<b>üéµ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {lyrics_data['track_name']}\n"
                f"<b>üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {artist_display_name}"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
            if lyrics_data.get('source_url'):
                header += f"\n<b>üîó –ò—Å—Ç–æ—á–Ω–∏–∫:</b> <a href='{lyrics_data['source_url']}'>Genius</a>"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            header += "\n\n<b>‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ</b>\n\n"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (–º–∞–∫—Å–∏–º—É–º 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            max_length = 4000 - len(header)
            if len(lyrics_text) > max_length:
                lyrics_text = lyrics_text[:max_length] + "...\n<i>(—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
            message_text = f"{header}{lyrics_text}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_results"))
            
            await callback.message.answer(message_text, reply_markup=builder.as_markup(), parse_mode="HTML")
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_msg = lyrics_data.get("error", "–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.answer(
                f"<b>‚ùå –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n{error_msg}",
                reply_markup=InlineKeyboardBuilder().row(
                    InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_results")
                ).as_markup(),
                parse_mode="HTML"
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏: {e}", exc_info=True)
        await callback.message.answer(
            "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.",
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_results")
            ).as_markup(),
            parse_mode="HTML"
        )

async def download_and_send_audio(original_message: Message, video_id: str, user_id: int):
    video_url = f"https://www.youtube.com/watch?v={video_id}"
    is_group = original_message.chat.type != "private"
    reply_func = original_message.reply if is_group else original_message.answer
    bot_instance = original_message.bot

    progress_msg = await reply_func(
        "<b>üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞</b>\n\n"
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...\n"
        "<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞</i>",
        parse_mode="HTML"
    )
    
    try:
        file_path, title = await asyncio.to_thread(download_audio, video_url)
        if not file_path or not os.path.exists(file_path) or os.path.getsize(file_path) < 1024:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞: path={file_path}, exists={os.path.exists(file_path) if file_path else False}, size={os.path.getsize(file_path) if file_path and os.path.exists(file_path) else 0}")
            await progress_msg.edit_text(
                "<b>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –∏–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.",
                parse_mode="HTML"
            )
            return False
        
        await progress_msg.edit_text(
            "<b>‚è≥ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ</b>\n\n"
            "–§–∞–π–ª —Å–∫–∞—á–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ —á–∞—Ç...",
            parse_mode="HTML"
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ (–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ track_info)
        parsed_artist = "SpotifySaverBot" # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        parsed_title = title # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        artist_title_match = re.match(r'^(.+?)\s*[-‚Äì‚Äî]\s*(.+)$', title)
        if artist_title_match:
            potential_artist = artist_title_match.group(1).strip()
            potential_title = artist_title_match.group(2).strip()
            # –ü—Ä–æ—Å—Ç–æ–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω—è—Ç—å —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if len(potential_artist) > 2 and len(potential_artist.split()) < 4: 
                parsed_artist = potential_artist
                parsed_title = potential_title
                logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: '{parsed_artist}', —Ç—Ä–µ–∫: '{parsed_title}' –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: '{title}'")
            else:
                logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–¥–µ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏–∑: '{title}'")
        else:
            logger.info(f"–§–æ—Ä–º–∞—Ç '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –¢—Ä–µ–∫' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: '{title}'")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        track_info = {
            'title': parsed_title, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            'uploader': parsed_artist, # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            'id': video_id
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏" –∏ "–ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
        back_button_markup = None
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, —á—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å, –Ω—É–∂–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ original_message –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä—è–º–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ,
        # –∞ –Ω–µ –≤—ã–±–æ—Ä–æ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.
        if user_id in user_search_results and user_search_results[user_id]:
            back_button_markup = get_track_keyboard(track_info, has_back_button=True)
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞), —Ç–æ –∫–Ω–æ–ø–∫–∞ "–ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º" –Ω–µ –Ω—É–∂–Ω–∞
            back_button_markup = get_track_keyboard(track_info, has_back_button=False)

        audio_file = FSInputFile(path=file_path, filename=f"{title[:60]}.mp3")
        # –î–ª—è caption –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–∫–∞—á–∞–ª yt-dlp
        caption = f"üéß {title[:900]}"
        # –î–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ title –∏ artist
        audio_title_meta = parsed_title[:64]
        audio_performer_meta = parsed_artist[:64]
        
        target_chat_id = original_message.chat.id
        try:
            if is_group:
                await bot_instance.send_audio(
                    chat_id=target_chat_id,
                    audio=audio_file, 
                    title=audio_title_meta, 
                    performer=audio_performer_meta,
                    caption=caption, 
                    reply_markup=back_button_markup,
                    reply_to_message_id=original_message.message_id
                )
            else:
                await bot_instance.send_audio(
                    chat_id=target_chat_id,
                    audio=audio_file, 
                    title=audio_title_meta, 
                    performer=audio_performer_meta,
                    caption=caption, 
                    reply_markup=back_button_markup
                )
            logger.info(f"–ê—É–¥–∏–æ '{title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id} —Å –º–µ—Ç–∞: title='{audio_title_meta}', performer='{audio_performer_meta}'")
            await progress_msg.delete()
            return True
        except Exception as send_err:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ –≤ —á–∞—Ç {target_chat_id}: {send_err}", exc_info=True)
            await progress_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å Telegram.")
            return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ {video_url}: {e}", exc_info=True)
        await progress_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.")
        return False
    finally:
        if 'file_path' in locals() and file_path and os.path.exists(file_path):
            try: os.remove(file_path); logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file_path}: {e}")

@router.message(Command("search"))
async def cmd_search(message: Message, state: FSMContext, download_queue: asyncio.Queue):
    user_id = message.from_user.id
    is_group = message.chat.type != "private"
    reply_func = message.reply if is_group else message.answer
    command_parts = message.text.split(maxsplit=1)
    if "@" in command_parts[0]: command_parts[0] = command_parts[0].split("@")[0]

    if len(command_parts) < 2 or not command_parts[1].strip():
        return await reply_func(
            "<b>‚ÑπÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/search –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</code>\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>/search Imagine Dragons - Believer</code>\n"
            "‚Ä¢ <code>/search https://youtu.be/abcdef</code>\n"
            "‚Ä¢ <code>/search https://open.spotify.com/track/...</code>",
            parse_mode="HTML"
        )

    query = command_parts[1].strip()
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /search –æ—Ç {user_id} (—á–∞—Ç {message.chat.id}): {query}")

    is_direct_download_link = False
    video_id_to_download = None

    if is_youtube_url(query) or is_spotify_url(query):
        if not await can_user_download(user_id, DOWNLOAD_LIMIT_PER_DAY):
            limit_msg = f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ({await get_user_downloads(user_id)}/{DOWNLOAD_LIMIT_PER_DAY})."
            await reply_func(limit_msg)
            return
        
        progress_msg = await reply_func("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Å—ã–ª–∫—É...")
        try:
            if is_youtube_url(query):
                results = await asyncio.to_thread(search_youtube, query, 1)
                if results and is_valid_youtube_id(results[0]['id']):
                    video_id_to_download = results[0]['id']
                    is_direct_download_link = True
                else:
                    await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ YouTube –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.")
                    return
            elif is_spotify_url(query):
                spotify_track_name = await asyncio.to_thread(get_spotify_track_info, query)
                if spotify_track_name:
                    await progress_msg.edit_text(f"üéµ –ò–∑ Spotify: {spotify_track_name}. –ò—â—É –Ω–∞ YouTube...")
                    query = spotify_track_name
                else:
                    await progress_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ Spotify.")
                    return
            
            if is_direct_download_link and video_id_to_download:
                 await progress_msg.delete()
                 try:
                    await download_queue.put((message, video_id_to_download, user_id))
                    await reply_func(f"‚ñ∂Ô∏è –í–∞—à —Ç—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–∑. {download_queue.qsize()}). –û–∂–∏–¥–∞–π—Ç–µ.")
                 except asyncio.QueueFull:
                    await reply_func(f"üòï –û—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞ ({MAX_QUEUE_SIZE} —Ç—Ä–µ–∫–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                 return

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ –≤ /search {query}: {e}")
            await progress_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.")
            return
        
        if not is_direct_download_link:
            if 'progress_msg' not in locals() or not progress_msg:
                 progress_msg = await reply_func("üîç –ò—â—É —Ç—Ä–µ–∫...")
            else: 
                 await progress_msg.edit_text(f"üîç –ò—â—É —Ç—Ä–µ–∫: \"{query}\"...")
    else: 
        progress_msg = await reply_func("üîç –ò—â—É —Ç—Ä–µ–∫...")

    is_artist_track = bool(re.search(r'^(.+?)\s*[-‚Äì]\s*(.+)$', query))
    cache_key = f"{user_id}_{query}"
    if cache_key in search_cache and (time.time() - search_cache[cache_key]['timestamp'] < CACHE_TTL):
        results = search_cache[cache_key]['results']
    else:
        results_limit = 5 if is_artist_track or is_group else 20
        results = await asyncio.to_thread(search_youtube, query, results_limit)
        if results: search_cache[cache_key] = {'results': results, 'timestamp': time.time()}
    
    if not results:
        await progress_msg.edit_text(
            "<b>‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        return

    await progress_msg.delete()
    user_search_results[user_id] = results
    result_text = f"<b>üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n<b>–ó–∞–ø—Ä–æ—Å:</b> \"{query}\""
    if is_artist_track: result_text += "\nüí° <i>–ü–æ–∫–∞–∑–∞–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</i>"
    await reply_func(
        f"{result_text}\n\n<b>üëá –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:</b>",
        reply_markup=get_search_results_keyboard(results, page=0, user_id=user_id),
        parse_mode="HTML"
    )
    await state.set_state(SearchStates.searching)
    asyncio.create_task(clear_user_cache(user_id))

@router.inline_query()
async def inline_search(query: InlineQuery, bot_instance: Bot):
    search_text = query.query.strip()
    bot_username = (await bot_instance.get_me()).username
    
    if not search_text:
        return await query.answer([], switch_pm_text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", switch_pm_parameter="inline_help")

    logger.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –æ—Ç {query.from_user.id}: {search_text}")
    
    try:
        results_limit = 5
        search_results = await asyncio.to_thread(search_youtube, search_text, results_limit)

        if not search_results:
            return await query.answer([], switch_pm_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...", switch_pm_parameter="not_found")

        inline_results = []
        for i, result in enumerate(search_results):
            title = result.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            video_id = result.get('id')
            url = f"https://www.youtube.com/watch?v={video_id}"
            uploader = result.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            thumbnail_url = f"https://img.youtube.com/vi/{video_id}/mqdefault.jpg"
            
            description = f"üë§ {uploader}" if uploader else "üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫"
            
            message_text = (
                f"<b>üéµ {title}</b>\n"
                f"<b>üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {uploader}\n\n"
                f"<b>üîó –°—Å—ã–ª–∫–∞:</b> {url}\n\n"
                f"<i>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ @{bot_username}</i>"
            )
            
            inline_results.append(InlineQueryResultArticle(
                id=f"{video_id}_{i}", title=title, 
                description=description, thumbnail_url=thumbnail_url,
                input_message_content=InputTextMessageContent(message_text=message_text, parse_mode="HTML"),
                reply_markup=InlineKeyboardBuilder().row(
                    InlineKeyboardButton(text="üíæ –°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫", url=f"https://t.me/{bot_username}?start=download_{video_id}")
                ).as_markup()
            ))
        await query.answer(inline_results, cache_time=300, is_personal=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–ª–∞–π–Ω-–ø–æ–∏—Å–∫–∞ ({search_text}): {e}")
        await query.answer([], switch_pm_text="–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞...", switch_pm_parameter="error") 