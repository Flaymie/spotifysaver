from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import RESULTS_PER_PAGE
import re

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö ID –≤–∏–¥–µ–æ
video_id_map = {}

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π
EMOJI = {
    'music': 'üéµ',
    'download': 'üíæ',
    'lyrics': 'üìù',
    'back': '‚Ü©Ô∏è',
    'next': '‚û°Ô∏è',
    'prev': '‚¨ÖÔ∏è',
    'search': 'üîç',
    'artist': 'üë§',
    'play': '‚ñ∂Ô∏è',
    'popular': 'üî•',
    'new': '‚ú®',
    'settings': '‚öôÔ∏è'
}

def get_search_results_keyboard(results, page=0, user_id=None):
    builder = InlineKeyboardBuilder()
    
    start_idx = page * RESULTS_PER_PAGE
    end_idx = min(start_idx + RESULTS_PER_PAGE, len(results))
    
    for i in range(start_idx, end_idx):
        result = results[i]
        title = result['title']
        video_id = result['id']
        uploader = result.get('uploader', '').strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∑–∏—Ü–∏–∏
        position_emoji = f"{i+1+start_idx}. " if i+start_idx < 9 else ""
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–º
        if uploader:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∏–º–µ–Ω–∞ –∞–≤—Ç–æ—Ä–æ–≤
            if len(title) > 35:
                title = title[:32] + "..."
            
            if len(uploader) > 15:
                uploader = uploader[:12] + "..."
                
            button_text = f"{position_emoji}{title}\n{EMOJI['artist']} {uploader}"
        else:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if len(title) > 45:
                title = title[:42] + "..."
            button_text = f"{position_emoji}{title}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω–¥–µ–∫—Å –¥–ª—è callback_data
        index_key = f"{user_id}_{i}"
        video_id_map[index_key] = video_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        builder.row(InlineKeyboardButton(
            text=button_text,
            callback_data=f"download_{index_key}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    nav_buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    current_page = f"{page + 1}/{(len(results) + RESULTS_PER_PAGE - 1) // RESULTS_PER_PAGE}"
    
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(
            text=f"{EMOJI['prev']} –ù–∞–∑–∞–¥",
            callback_data=f"page_{page-1}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    nav_buttons.append(InlineKeyboardButton(
        text=f"üìÑ {current_page}",
        callback_data=f"current_page"  # –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ))
    
    if end_idx < len(results):
        nav_buttons.append(InlineKeyboardButton(
            text=f"{EMOJI['next']} –í–ø–µ—Ä–µ–¥",
            callback_data=f"page_{page+1}"
        ))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    return builder.as_markup()

def get_video_id_by_key(key):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π ID –≤–∏–¥–µ–æ –ø–æ –∫–ª—é—á—É"""
    return video_id_map.get(key)

def get_track_keyboard(track_info, has_back_button=True):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç—Ä–µ–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏
    
    Args:
        track_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
        has_back_button: –î–æ–±–∞–≤–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è callback_data
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏ —É–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–∫–∏ BUTTON_DATA_INVALID
    title = re.sub(r'[^\w\s-]', '', track_info.get('title', ''))[:20]
    uploader = re.sub(r'[^\w\s-]', '', track_info.get('uploader', ''))[:20]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.row(InlineKeyboardButton(
        text=f"{EMOJI['lyrics']} –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏",
        callback_data=f"lyrics_{title}_{uploader}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if has_back_button:
        builder.row(InlineKeyboardButton(
            text=f"{EMOJI['back']} –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞",
            callback_data="back_to_results"
        ))
    
    return builder.as_markup() 